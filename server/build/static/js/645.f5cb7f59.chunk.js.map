{"version":3,"file":"static/js/645.f5cb7f59.chunk.js","mappings":"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","sources":["Component/Auth/Register.jsx","../node_modules/@mui/icons-material/AccountBalanceWallet.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { NavLink, useNavigate } from \"react-router-dom\";\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { registerUser } from \"../../Api/api\";\r\nimport { useAccount } from \"wagmi\";\r\nimport useMakeToast from \"../../hooks/makeToast\";\r\nimport Loading from \"../../Loading/Loading\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  InputAdornment,\r\n  styled,\r\n  TextField,\r\n  Typography,\r\n  useMediaQuery,\r\n} from \"@mui/material\";\r\nimport EmailIcon from \"@mui/icons-material/Email\";\r\nimport LockIcon from \"@mui/icons-material/Lock\";\r\nimport PersonIcon from \"@mui/icons-material/Person\";\r\nimport LockOpenIcon from \"@mui/icons-material/LockOpen\";\r\nimport AccountBalanceWalletIcon from \"@mui/icons-material/AccountBalanceWallet\";\r\n\r\nimport {\r\n  loginBg,\r\n  loginPage2,\r\n  SignPage,\r\n  loginElipse,\r\n  signUpLogo,\r\n} from \"../Images\";\r\n\r\nconst validationSchema = yup.object({\r\n  username: yup\r\n    .string()\r\n    .min(2, \"Too Short!\")\r\n    .max(70, \"Too Long!\")\r\n    .required(\"Required\"),\r\n  email: yup\r\n    .string(\"Enter your email\")\r\n    .email(\"Enter a valid email\")\r\n    .required(\"Email is required\"),\r\n  password: yup\r\n    .string(\"Enter your password\")\r\n    .min(8, \"Password should be of minimum 8 characters length\")\r\n    .required(\"Password is required\"),\r\n});\r\nconst CustomTextField = styled(TextField)({\r\n  maxWidth: \"400px\",\r\n  width: \"100%\",\r\n  fontFamily: \"Roboto\",\r\n  fontWeight: \"500\",\r\n  borderRadius: \"5px\",\r\n  \"& label.Mui-focused\": {\r\n    color: \"#000\",\r\n  },\r\n  \"& .MuiInput-underline:after\": {\r\n    borderBottomColor: \"transparent\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent\",\r\n    },\r\n  },\r\n  input: {\r\n    \"&::placeholder\": {\r\n      textOverflow: \"ellipsis !important\",\r\n      color: \"#000 !important\",\r\n    },\r\n    fontSize: { xs: \"12px\", md: \"14px\" },\r\n  },\r\n  background: \"#F1EEEE\",\r\n});\r\n\r\nconst Register = () => {\r\n  const makeToast = useMakeToast();\r\n  const check = useMediaQuery(\"(max-width:900px)\");\r\n  const [btn, setBtn] = useState(true);\r\n  const [toggle, setToggle] = useState(false);\r\n  const { address } = useAccount();\r\n  const [walletaddress, setWalletaddress] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const navigate = useNavigate();\r\n  const [lat, setLat] = useState(null);\r\n  const [lng, setLng] = useState(null);\r\n  const getLocation = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(showPosition);\r\n    } else {\r\n      console.log(\"Error while geting  location ... \");\r\n    }\r\n  };\r\n  function showPosition(position) {\r\n    setLat(position.coords.latitude);\r\n    setLng(position.coords.longitude);\r\n  }\r\n  useEffect(() => {\r\n    getLocation();\r\n  }, []);\r\n  useEffect(() => {\r\n    setWalletaddress(address);\r\n  }, [address]);\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      username: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n    validationSchema: validationSchema,\r\n\r\n    onSubmit: async (values) => {\r\n      try {\r\n        const { username, email, password } = values;\r\n        const obj = {\r\n          username,\r\n          email,\r\n          password,\r\n          wallet: walletaddress,\r\n          latLng: [lat, lng],\r\n        };\r\n\r\n        if (!address) {\r\n          makeToast(\"Please connect with Wallet\", \"error\", 3, \"Failed\");\r\n          return false;\r\n        }\r\n        setLoading(true);\r\n        const data = await registerUser(obj);\r\n        if (data?.status === \"ok\") {\r\n          setLoading(false);\r\n          makeToast(`${data?.message}`, \"success\", 3, \"Success\");\r\n          setTimeout(() => {\r\n            navigate(\"/login\");\r\n          }, 2000);\r\n        }\r\n        data?.status === \"error\" &&\r\n          makeToast(`${data?.message}`, \"error\", 3, \"Failed\");\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.log(\"Error in user registration\", err);\r\n        setLoading(false);\r\n      }\r\n    },\r\n  });\r\n  return (\r\n    <Box\r\n      sx={{\r\n        backgroundImage: `url(${loginBg})`,\r\n        backgroundSize: \"100%  100%\",\r\n        backgroundPosition: \"center\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        py: 9,\r\n        minHeight: \"81vh\",\r\n        px: 1,\r\n      }}\r\n    >\r\n      <Loading loading={loading} />\r\n      <Container maxWidth=\"lg\">\r\n        <Box position=\"relative \" mt={5}>\r\n          {check ? (\r\n            \"\"\r\n          ) : (\r\n            <img\r\n              src={loginElipse}\r\n              alt=\"\"\r\n              style={{\r\n                position: \"absolute\",\r\n                top: \"-1px\",\r\n                transform: \"rotate(92deg)\",\r\n                right: -7,\r\n              }}\r\n            />\r\n          )}\r\n          <Grid\r\n            container\r\n            bgcolor=\"#fff\"\r\n            sx={{\r\n              clipPath: {\r\n                xs: \"\",\r\n                md: \"polygon(0 0, 94% 0, 100% 12%, 100% 100%, 4% 100%, 0 96%)\",\r\n              },\r\n            }}\r\n          >\r\n            <Grid item xs={12} md={6}>\r\n              <Box\r\n                sx={{\r\n                  backgroundImage: `url(${!check ? SignPage : loginPage2})`,\r\n                  backgroundSize: \"100%  100%\",\r\n                  backgroundPosition: \"center\",\r\n                  backgroundRepeat: \"no-repeat\",\r\n                  px: 1,\r\n                  height: \"100%\",\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"center\",\r\n                  py: 1,\r\n                }}\r\n              >\r\n                <Box\r\n                  sx={{\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"center\",\r\n                    flexDirection: \"column\",\r\n                  }}\r\n                >\r\n                  <Box>\r\n                    <img src={signUpLogo} alt=\"\" />\r\n                  </Box>\r\n                  <Typography\r\n                    sx={{\r\n                      fontFamily: \"Inter\",\r\n                      fontSize: { xs: \"15px\", md: \"20px\" },\r\n                      color: \"#fff\",\r\n                      mt: 1,\r\n                    }}\r\n                  >\r\n                    Welcome to the\r\n                  </Typography>\r\n                  <Typography\r\n                    sx={{\r\n                      fontFamily: \"Audiowide\",\r\n                      fontSize: { xs: \"28px\", md: \"48px\" },\r\n                      lineHeight: { xs: \"35px\", md: \"58px\" },\r\n                      color: \"#FFFFFF\",\r\n                    }}\r\n                  >\r\n                    Metazcubez\r\n                  </Typography>\r\n                  <Box\r\n                    sx={{\r\n                      width: \"45%\",\r\n                      height: \"1px\",\r\n                      bgcolor: \"#fff\",\r\n                      my: 2,\r\n                    }}\r\n                  ></Box>\r\n                  <Typography\r\n                    sx={{\r\n                      fontFamily: \"Inter\",\r\n                      fontWeight: 500,\r\n                      fontSize: { xs: \"14px\", md: \"18px\" },\r\n                      color: \"#FFFFFF\",\r\n                      // mt: { xs: \"20px\", md: \"30px\" },\r\n                      width: { xs: \"100%\", md: \"90%\" },\r\n                      textAlign: \"center\",\r\n                    }}\r\n                  >\r\n                    Enter required details and start journey with us!\r\n                  </Typography>\r\n                </Box>\r\n              </Box>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6} p={{ xs: 3, md: 8 }}>\r\n              <Box\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n                justifyContent={{ xs: \"center\", md: \"flex-start\" }}\r\n                mt={2}\r\n              >\r\n                <Box\r\n                  sx={{\r\n                    backgroundColor: \" #34D9B1\",\r\n                    clipPath:\r\n                      \"polygon(5% 0, 100% 0, 100% 90%, 95% 100%, 0 100%, 0 15%)\",\r\n                    p: \"2px\",\r\n                  }}\r\n                >\r\n                  <Box\r\n                    sx={{\r\n                      top: \"1px\",\r\n                      left: \"1px\",\r\n                      right: \"1px\",\r\n                      bottom: \"1px\",\r\n                      bgcolor: \"#fff\",\r\n                      clipPath:\r\n                        \"polygon(5% 0, 100% 0, 100% 90%, 95% 100%, 0 100%, 0 15%)\",\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      to=\"/login\"\r\n                      component={NavLink}\r\n                      sx={{\r\n                        fontFamily: \"Inter\",\r\n                        fontWeight: 600,\r\n                        fontSize: \"12px\",\r\n\r\n                        color: !btn ? \"#fff\" : \"#34D9B1\",\r\n                        background: !btn\r\n                          ? \"linear-gradient(90.1deg, #4F98D0 0.11%, #34D9B1 95.94%)\"\r\n                          : \"transparent\",\r\n                        p: { xs: \"6px 20px\", md: \"10px 50px\" },\r\n                        borderRadius: \"1px\",\r\n                      }}\r\n                      onClick={() => setBtn(false)}\r\n                    >\r\n                      Login\r\n                    </Button>\r\n                    <Button\r\n                      to=\"/register\"\r\n                      component={NavLink}\r\n                      sx={{\r\n                        clipPath:\r\n                          \"polygon(5% 0, 100% 0, 100% 90%, 95% 100%, 0 100%, 0 15%)\",\r\n                        background: btn\r\n                          ? \"linear-gradient(90.1deg, #4F98D0 0.11%, #34D9B1 95.94%)\"\r\n                          : \"transparent\",\r\n\r\n                        color: btn ? \"#fff\" : \"#34D9B1\",\r\n                        fontFamily: \"Inter\",\r\n                        fontWeight: 600,\r\n                        fontSize: \"12px\",\r\n                        boxShadow: \"5px 1px 7px rgba(0, 0, 0, 0.35)\",\r\n                        p: { xs: \"6px 20px\", md: \"10px 50px\" },\r\n                        borderRadius: \"1px\",\r\n                      }}\r\n                      onClick={() => setBtn(true)}\r\n                    >\r\n                      Sign up\r\n                    </Button>\r\n                  </Box>\r\n                </Box>\r\n              </Box>\r\n              <form>\r\n                <Box display=\"flex\" gap={3} flexDirection=\"column\" mt={5}>\r\n                  <CustomTextField\r\n                    autoComplete=\"off\"\r\n                    id=\"standard-name\"\r\n                    sx={{\r\n                      // maxWidth: check ? \"100%\" : \"400px\",\r\n                      clipPath:\r\n                        \"polygon(5% 0, 100% 0, 100% 90%, 95% 100%, 0 100%, 0 15%)\",\r\n                    }}\r\n                    placeholder=\"username\"\r\n                    name=\"username\"\r\n                    value={formik.values.username}\r\n                    onChange={formik.handleChange}\r\n                    error={\r\n                      formik.touched.username && Boolean(formik.errors.username)\r\n                    }\r\n                    helperText={\r\n                      formik.touched.username && formik.errors.username\r\n                    }\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <PersonIcon sx={{ color: \"rgba(0, 0, 0, 0.3)\" }} />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    required={true}\r\n                  />\r\n                  <CustomTextField\r\n                    autoComplete=\"off\"\r\n                    id=\"standard-name\"\r\n                    sx={{\r\n                      // maxWidth: check ? \"100%\" : \"400px\",\r\n                      clipPath:\r\n                        \"polygon(5% 0, 100% 0, 100% 90%, 95% 100%, 0 100%, 0 15%)\",\r\n                    }}\r\n                    name=\"wallet\"\r\n                    placeholder={\"Wallet\"}\r\n                    value={address}\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <AccountBalanceWalletIcon\r\n                            sx={{ color: \"rgba(0, 0, 0, 0.3)\" }}\r\n                          />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    required={true}\r\n                    readOnly\r\n                  />\r\n                  <CustomTextField\r\n                    autoComplete=\"off\"\r\n                    id=\"standard-name\"\r\n                    sx={{\r\n                      // maxWidth: check ? \"100%\" : \"400px\",\r\n                      clipPath:\r\n                        \"polygon(5% 0, 100% 0, 100% 90%, 95% 100%, 0 100%, 0 15%)\",\r\n                    }}\r\n                    type=\"email\"\r\n                    placeholder=\"Email\"\r\n                    name=\"email\"\r\n                    value={formik.values.email}\r\n                    onChange={formik.handleChange}\r\n                    error={formik.touched.email && Boolean(formik.errors.email)}\r\n                    helperText={formik.touched.email && formik.errors.email}\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <EmailIcon sx={{ color: \"rgba(0, 0, 0, 0.3)\" }} />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    required={true}\r\n                  />\r\n                  <CustomTextField\r\n                    autoComplete=\"off\"\r\n                    id=\"standard-name\"\r\n                    sx={{\r\n                      // maxWidth: check ? \"100%\" : \"400px\",\r\n                      clipPath:\r\n                        \"polygon(5% 0, 100% 0, 100% 80%, 95% 100%, 0 100%, 0 15%)\",\r\n                    }}\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    type={toggle ? \"text\" : \"password\"}\r\n                    value={formik.values.password}\r\n                    onChange={formik.handleChange}\r\n                    error={\r\n                      formik.touched.password && Boolean(formik.errors.password)\r\n                    }\r\n                    helperText={\r\n                      formik.touched.password && formik.errors.password\r\n                    }\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment\r\n                          sx={{ cursor: \"pointer\" }}\r\n                          position=\"start\"\r\n                          onClick={() => {\r\n                            setToggle(!toggle);\r\n                          }}\r\n                        >\r\n                          {toggle ? (\r\n                            <LockOpenIcon\r\n                              sx={{ color: \"rgba(0, 0, 0, 0.3)\" }}\r\n                            />\r\n                          ) : (\r\n                            <LockIcon sx={{ color: \"rgba(0, 0, 0, 0.3)\" }} />\r\n                          )}\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    required={true}\r\n                  />\r\n                </Box>\r\n\r\n                <Box\r\n                  display=\"flex\"\r\n                  alignItems=\"center\"\r\n                  justifyContent=\"center\"\r\n                  mt={6}\r\n                >\r\n                  <Button\r\n                    type=\"submit\"\r\n                    onClick={formik.handleSubmit}\r\n                    sx={{\r\n                      background:\r\n                        \"linear-gradient(90.1deg, #4F98D0 0.11%, #34D9B1 95.94%)\",\r\n                      boxShadow: \"0px 4px 9px rgba(0, 0, 0, 0.25)\",\r\n                      borderRadius: \"4px\",\r\n                      fontFamily: \"Inter\",\r\n                      fontWeight: 700,\r\n                      fontSize: \"16px\",\r\n                      color: \"#FFFFFF\",\r\n                      px: 7,\r\n                      py: 1,\r\n                      width: { xs: \"100%\", md: \"45%\" },\r\n                    }}\r\n                  >\r\n                    SIGN UP\r\n                  </Button>\r\n                </Box>\r\n              </form>\r\n              <Typography\r\n                sx={{\r\n                  fontFamily: \"Inter\",\r\n                  fontSize: \"11px\",\r\n                  color: \"rgba(0, 0, 0, 0.5)\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  my: \"10px\",\r\n                }}\r\n              >\r\n                Register with Email Instead?\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Container>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M21 18v1c0 1.1-.9 2-2 2H5c-1.11 0-2-.9-2-2V5c0-1.1.89-2 2-2h14c1.1 0 2 .9 2 2v1h-9c-1.11 0-2 .9-2 2v8c0 1.1.89 2 2 2h9zm-9-2h10V8H12v8zm4-2.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\"\n}), 'AccountBalanceWallet');\nexports.default = _default;"],"names":["validationSchema","yup","username","min","max","required","email","password","CustomTextField","styled","TextField","maxWidth","width","fontFamily","fontWeight","borderRadius","color","borderBottomColor","borderColor","input","textOverflow","fontSize","xs","md","background","makeToast","useMakeToast","check","useMediaQuery","useState","btn","setBtn","toggle","setToggle","address","useAccount","walletaddress","setWalletaddress","loading","setLoading","navigate","useNavigate","lat","setLat","lng","setLng","showPosition","position","coords","latitude","longitude","useEffect","navigator","geolocation","getCurrentPosition","console","log","formik","useFormik","initialValues","onSubmit","values","obj","wallet","latLng","registerUser","data","status","message","setTimeout","sx","backgroundImage","loginBg","backgroundSize","backgroundPosition","backgroundRepeat","py","minHeight","px","mt","src","loginElipse","alt","style","top","transform","right","container","bgcolor","clipPath","item","loginPage2","SignPage","height","display","alignItems","justifyContent","flexDirection","signUpLogo","lineHeight","my","textAlign","p","backgroundColor","left","bottom","to","component","NavLink","onClick","boxShadow","gap","autoComplete","id","placeholder","name","value","onChange","handleChange","error","touched","Boolean","errors","helperText","InputProps","startAdornment","readOnly","type","cursor","handleSubmit","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}