{"version":3,"file":"static/js/947.777702fe.chunk.js","mappings":"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","sources":["Component/Auth/Login.jsx"],"sourcesContent":["import {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  InputAdornment,\r\n  styled,\r\n  TextField,\r\n  Typography,\r\n  useMediaQuery,\r\n} from \"@mui/material\";\r\nimport EmailIcon from \"@mui/icons-material/Email\";\r\nimport LockIcon from \"@mui/icons-material/Lock\";\r\nimport LockOpenIcon from \"@mui/icons-material/LockOpen\";\r\nimport {\r\n  loginBg,\r\n  logoLogin,\r\n  loginPage,\r\n  loginPage2,\r\n  loginElipse,\r\n} from \"../Images\";\r\nimport React from \"react\";\r\nimport { NavLink, useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { loginUser } from \"../../Api/api\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Adduser } from \"../../Redux/Reducer\";\r\nimport Loading from \"../../Loading/Loading\";\r\nimport { useState } from \"react\";\r\nimport { useAccount } from \"wagmi\";\r\nimport useMakeToast from \"../../hooks/makeToast\";\r\nconst validationSchema = yup.object({\r\n  email: yup\r\n    .string(\"Enter your email\")\r\n    .email(\"Enter a valid email\")\r\n    .required(\"Email is required\"),\r\n  password: yup\r\n    .string(\"Enter your password\")\r\n    .min(8, \"Password should be of minimum 8 characters length\")\r\n    .required(\"Password is required\"),\r\n});\r\n\r\nconst CustomTextField = styled(TextField)({\r\n  // maxWidth: check ? \"100%\" : \"400px\",\r\n  width: \"100%\",\r\n  fontFamily: \"Roboto\",\r\n  fontWeight: \"500\",\r\n  borderRadius: \"5px\",\r\n  \"& label.Mui-focused\": {\r\n    color: \"#000\",\r\n  },\r\n  \"& .MuiInput-underline:after\": {\r\n    borderBottomColor: \"transparent\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent\",\r\n    },\r\n  },\r\n  input: {\r\n    \"&::placeholder\": {\r\n      textOverflow: \"ellipsis !important\",\r\n      color: \"#000 !important\",\r\n    },\r\n    fontSize: { xs: \"12px\", md: \"14px\" },\r\n  },\r\n  background: \"#F1EEEE\",\r\n});\r\n\r\nconst Login = () => {\r\n  const makeToast = useMakeToast();\r\n  const check = useMediaQuery(\"(max-width:900px)\");\r\n  const [btn, setBtn] = useState(true);\r\n  const [loading, setLoading] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { address } = useAccount();\r\n  const navigate = useNavigate();\r\n  const [toggle, setToggle] = useState(false);\r\n  const loginHandle = async (values) => {\r\n    setLoading(true);\r\n    try {\r\n      const data = await loginUser(values);\r\n      if (data?.status === \"ok\") {\r\n        dispatch(Adduser(data?.data));\r\n        makeToast(`${data?.message}`, \"success\", 3, \"Success\");\r\n        localStorage.setItem(\"maptoken\", data.token);\r\n        setLoading(false);\r\n        setTimeout(() => {\r\n          navigate(\"/\");\r\n        }, 2000);\r\n      }\r\n      data?.status === \"error\" &&\r\n        makeToast(`${data?.message}`, \"error\", 3, \"Success\");\r\n      setLoading(false);\r\n    } catch (err) {\r\n      console.log(\"Error in login User\", err);\r\n      setLoading(false);\r\n    }\r\n  };\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n\r\n    validationSchema: validationSchema,\r\n    onSubmit: async (values) => {\r\n      loginHandle(values);\r\n    },\r\n  });\r\n  return (\r\n    <>\r\n      <Loading loading={loading} />\r\n      <Box\r\n        sx={{\r\n          backgroundImage: `url(${loginBg})`,\r\n          backgroundSize: \"100%  100%\",\r\n          backgroundPosition: \"center\",\r\n          backgroundRepeat: \"no-repeat\",\r\n          py: 9,\r\n          minHeight: \"81vh\",\r\n        }}\r\n      >\r\n        <Container maxWidth=\"lg\">\r\n          <Box position=\"relative\" mt={5}>\r\n            {check ? (\r\n              \"\"\r\n            ) : (\r\n              <img\r\n                src={loginElipse}\r\n                alt=\"\"\r\n                style={{\r\n                  position: \"absolute\",\r\n                  top: \"5px\",\r\n                  transform: \"rotate(-5deg)\",\r\n                  width: \"80px\",\r\n                  left: \"-5px\",\r\n                }}\r\n              />\r\n            )}\r\n            <Grid\r\n              container\r\n              bgcolor=\"#fff\"\r\n              sx={{\r\n                clipPath: {\r\n                  xs: \"polygon(0 0, 100% 0, 100% 100%, 0 100%)\",\r\n                  md: \"polygon(7% 0, 100% 0, 100% 93%, 95% 100%, 0 100%, 0 16%)\",\r\n                },\r\n                flexDirection: { xs: \"column-reverse\", md: \"row\" },\r\n              }}\r\n            >\r\n              <Grid item xs={12} sm={12} md={6} p={{ xs: 3, md: 8 }}>\r\n                <Box\r\n                  sx={{\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"space-between\",\r\n                    width: \"100%\",\r\n                  }}\r\n                >\r\n                  <Box>\r\n                    <Typography\r\n                      sx={{\r\n                        fontFamily: \"Inter\",\r\n                        fontSize: { xs: \"15px\", md: \"20px\" },\r\n                        lineHeight: { xs: \"14px\", md: \"8px\" },\r\n                      }}\r\n                    >\r\n                      Welcome to the\r\n                    </Typography>\r\n                    <Typography\r\n                      sx={{\r\n                        fontFamily: \"Audiowide\",\r\n                        fontSize: { xs: \"27px\", md: \"48px\" },\r\n                        background:\r\n                          \"linear-gradient(90.1deg, #4F98D0 0.11%, #34D9B1 95.94%)\",\r\n                        WebkitBackgroundClip: \"text\",\r\n                        WebkitTextFillColor: \"transparent\",\r\n                      }}\r\n                    >\r\n                      Metazcubez\r\n                    </Typography>\r\n                  </Box>\r\n                  <Box>\r\n                    <img\r\n                      src={logoLogin}\r\n                      alt=\"\"\r\n                      style={{\r\n                        width: \"100%\",\r\n                      }}\r\n                    />\r\n                  </Box>\r\n                </Box>\r\n                <Box\r\n                  onClick={() => {\r\n                    !address\r\n                      ? makeToast(\r\n                          \"please connect with wallet !\",\r\n                          \"error\",\r\n                          3,\r\n                          \"Success\"\r\n                        )\r\n                      : loginHandle({ address });\r\n                  }}\r\n                  sx={{\r\n                    width: \"25%\",\r\n                    height: \"2px\",\r\n                    bgcolor: \"#00C5BF\",\r\n                    my: 2,\r\n                  }}\r\n                ></Box>\r\n\r\n                <Box\r\n                  display=\"flex\"\r\n                  alignItems=\"center\"\r\n                  justifyContent={{ xs: \"center\", md: \"flex-start\" }}\r\n                  width=\"100%\"\r\n                >\r\n                  <Box\r\n                    sx={{\r\n                      backgroundColor: \" #34D9B1\",\r\n                      clipPath:\r\n                        \"polygon(5% 0, 100% 0, 100% 90%, 95% 100%, 0 100%, 0 15%)\",\r\n                      p: \"2px\",\r\n                    }}\r\n                  >\r\n                    <Box\r\n                      sx={{\r\n                        top: \"1px\",\r\n                        left: \"1px\",\r\n                        right: \"1px\",\r\n                        bottom: \"1px\",\r\n                        bgcolor: \"#fff\",\r\n                        clipPath:\r\n                          \"polygon(5% 0, 100% 0, 100% 90%, 95% 100%, 0 100%, 0 15%)\",\r\n                      }}\r\n                    >\r\n                      <Button\r\n                        component={NavLink}\r\n                        to=\"/login\"\r\n                        sx={{\r\n                          clipPath:\r\n                            \"polygon(5% 0, 100% 0, 100% 90%, 95% 100%, 0 100%, 0 15%)\",\r\n                          background: btn\r\n                            ? \"linear-gradient(90.1deg, #4F98D0 0.11%, #34D9B1 95.94%)\"\r\n                            : \"transparent\",\r\n                          color: btn ? \"#fff\" : \"#34D9B1\",\r\n                          fontFamily: \"Inter\",\r\n                          fontWeight: 600,\r\n                          fontSize: \"12px\",\r\n                          p: { xs: \"6px 20px\", md: \"10px 50px\" },\r\n                          boxShadow: \"5px 1px 7px rgba(0, 0, 0, 0.35)\",\r\n                          borderRadius: \"1px\",\r\n                        }}\r\n                        onClick={() => setBtn(true)}\r\n                      >\r\n                        Login\r\n                      </Button>\r\n                      <Button\r\n                        to=\"/register\"\r\n                        component={NavLink}\r\n                        sx={{\r\n                          fontFamily: \"Inter\",\r\n                          fontWeight: 600,\r\n                          fontSize: \"12px\",\r\n                          color: !btn ? \"#fff\" : \"#34D9B1\",\r\n                          borderRadius: \"1px\",\r\n                          background: !btn\r\n                            ? \"linear-gradient(90.1deg, #4F98D0 0.11%, #34D9B1 95.94%)\"\r\n                            : \"transparent\",\r\n                          p: { xs: \"6px 20px\", md: \"10px 50px\" },\r\n                        }}\r\n                        onClick={() => setBtn(false)}\r\n                      >\r\n                        Sign up\r\n                      </Button>\r\n                    </Box>\r\n                  </Box>\r\n                </Box>\r\n                <form\r\n                  onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    formik.handleSubmit();\r\n                  }}\r\n                >\r\n                  <CustomTextField\r\n                    autoComplete=\"off\"\r\n                    id=\"standard-email\"\r\n                    sx={{\r\n                      clipPath:\r\n                        \"polygon(5% 0, 100% 0, 100% 90%, 95% 100%, 0 100%, 0 15%)\",\r\n                      margin: \"40px 0px\",\r\n                    }}\r\n                    type=\"email\"\r\n                    placeholder=\"Email\"\r\n                    name=\"email\"\r\n                    value={formik.values.email}\r\n                    onChange={formik.handleChange}\r\n                    error={formik.touched.email && Boolean(formik.errors.email)}\r\n                    helperText={formik.touched.email && formik.errors.email}\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <EmailIcon sx={{ color: \"rgba(0, 0, 0, 0.3)\" }} />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    required={true}\r\n                  />{\" \"}\r\n                  <CustomTextField\r\n                    autoComplete=\"off\"\r\n                    id=\"standard-password\"\r\n                    sx={{\r\n                      clipPath:\r\n                        \"polygon(5% 0, 100% 0, 100% 90%, 95% 100%, 0 100%, 0 15%)\",\r\n                    }}\r\n                    type={toggle ? \"text\" : \"password\"}\r\n                    name=\"password\"\r\n                    placeholder=\"Password\"\r\n                    value={formik.values.password}\r\n                    onChange={formik.handleChange}\r\n                    error={\r\n                      formik.touched.password && Boolean(formik.errors.password)\r\n                    }\r\n                    helperText={\r\n                      formik.touched.password && formik.errors.password\r\n                    }\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment\r\n                          type=\"password\"\r\n                          position=\"start\"\r\n                          sx={{ cursor: \"pointer\" }}\r\n                          onClick={() => {\r\n                            setToggle(!toggle);\r\n                          }}\r\n                        >\r\n                          {toggle ? (\r\n                            <LockOpenIcon\r\n                              sx={{ color: \"rgba(0, 0, 0, 0.3)\" }}\r\n                            />\r\n                          ) : (\r\n                            <LockIcon sx={{ color: \"rgba(0, 0, 0, 0.3)\" }} />\r\n                          )}\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    required={true}\r\n                  />\r\n                  {/* <Typography\r\n                    sx={{\r\n                      fontFamily: \"Inter\",\r\n                      fontSize: \"11px\",\r\n                      color: \"rgba(0, 0, 0, 0.5)\",\r\n                      display: \"flex\",\r\n                      justifyContent: \"flex-end\",\r\n                      width: \"90%\",\r\n                      my: \"10px\",\r\n                    }}\r\n                  >\r\n                    Forget Password?\r\n                  </Typography> */}\r\n                  <Box\r\n                    display=\"flex\"\r\n                    alignItems=\"center\"\r\n                    justifyContent=\"center\"\r\n                    mt={6}\r\n                  >\r\n                    <Button\r\n                      type=\"submit\"\r\n                      sx={{\r\n                        background:\r\n                          \"linear-gradient(90.1deg, #4F98D0 0.11%, #34D9B1 95.94%)\",\r\n                        boxShadow: \"0px 4px 9px rgba(0, 0, 0, 0.25)\",\r\n                        borderRadius: \"4px\",\r\n                        fontFamily: \"Inter\",\r\n                        fontWeight: 700,\r\n                        fontSize: \"16px\",\r\n                        color: \"#FFFFFF\",\r\n                        px: 6,\r\n                        py: 1,\r\n                        width: { xs: \"100%\", md: \"\" },\r\n                      }}\r\n                    >\r\n                      Login\r\n                    </Button>\r\n                  </Box>\r\n                </form>\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={6}>\r\n                <Box\r\n                  sx={{\r\n                    backgroundImage: `url(${!check ? loginPage : loginPage2})`,\r\n                    backgroundSize: \"100%  100%\",\r\n                    backgroundPosition: \"center\",\r\n                    backgroundRepeat: \"no-repeat\",\r\n                    height: \"100%\",\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"center\",\r\n                    flexDirection: \"column\",\r\n                    py: { xs: 10, md: 0.1 },\r\n                  }}\r\n                >\r\n                  <Typography\r\n                    sx={{\r\n                      fontFamily: \"Audiowide\",\r\n                      fontSize: { xs: \"30px\", md: \"48px\" },\r\n                      color: \"#FFFFFF\",\r\n                    }}\r\n                  >\r\n                    Welcome back\r\n                  </Typography>\r\n                  <Typography\r\n                    sx={{\r\n                      fontFamily: \"Inter\",\r\n                      fontWeight: 500,\r\n                      fontSize: { xs: \"14px\", md: \"18px\" },\r\n                      lineHeight: \"24px\",\r\n                      color: \"#FFFFFF\",\r\n                      width: { xs: \"100%\", md: \"80%\" },\r\n                      textAlign: \"center\",\r\n                    }}\r\n                  >\r\n                    To Keep Connected With Us, Please Enter Your Email Or\r\n                    <span style={{ fontWeight: \"bolder\" }}>\r\n                      Login With Wallet\r\n                    </span>\r\n                  </Typography>\r\n                </Box>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Container>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"names":["validationSchema","yup","email","required","password","min","CustomTextField","styled","TextField","width","fontFamily","fontWeight","borderRadius","color","borderBottomColor","borderColor","input","textOverflow","fontSize","xs","md","background","makeToast","useMakeToast","check","useMediaQuery","useState","btn","setBtn","loading","setLoading","dispatch","useDispatch","address","useAccount","navigate","useNavigate","toggle","setToggle","loginHandle","values","loginUser","data","status","Adduser","message","localStorage","setItem","token","setTimeout","console","log","formik","useFormik","initialValues","onSubmit","sx","backgroundImage","loginBg","backgroundSize","backgroundPosition","backgroundRepeat","py","minHeight","maxWidth","position","mt","src","loginElipse","alt","style","top","transform","left","container","bgcolor","clipPath","flexDirection","item","sm","p","display","alignItems","justifyContent","lineHeight","WebkitBackgroundClip","WebkitTextFillColor","logoLogin","onClick","height","my","backgroundColor","right","bottom","component","NavLink","to","boxShadow","e","preventDefault","handleSubmit","autoComplete","id","margin","type","placeholder","name","value","onChange","handleChange","error","touched","Boolean","errors","helperText","InputProps","startAdornment","cursor","px","loginPage2","loginPage","textAlign"],"sourceRoot":""}